<?xml version="1.0"?>

<launch>

    <arg name="oflow" default="true" doc="compute oflow"/>
    <arg name="nearness" default="true" doc="compute nearness"/>
      <arg name="oflow_laser" default="true" doc="pub laserscan from oflow depth"/>
    <arg name="odom" default="true"/>
    <arg name="rviz" default="false"/>

    <arg name="pcl_limit_filter_topic" default="mmWaveDataHdl/RScan"/>

    <!-- run pcl and ROR filters -->
    <!-- Add nodes to filter/limit Radar data before using it for mapping -->
    <include file="$(find radar_rig)/launch/radar_limit_filters.launch">
       <arg name="radar_pcl" value="$(arg pcl_limit_filter_topic)"/>
    </include>

    <!-- Perform ROR filtering on output from pcl passthrough filters -->
    <!--
    <node pkg="nodelet" type="nodelet" name="rzi_ROR_filt_mapping" args="standalone pcl/RadiusOutlierRemoval" output="screen">
      <remap from="~input" to="rzi_filt_out"/>
      <remap from="~output" to="rzi_ROR_filter_out"/>
      <param name="min_neighbors" value="4"/>
      <param name="radius_search" value="1"/>
    </node>
   -->

    <node if="$(arg oflow)" name="optic_flow_node" pkg="optic_flow_node" type="wide_field_optic_flow_node" output="screen" >
        <param name="image_center_x" value="320"/>
        <param name="image_center_y" value="240"/>
        <param name="inner_ring_radius" value="235"/>
        <param name="ring_dr" value="10"/>
        <param name="num_ring_points" value="160"/>
        <param name="num_rings" value="5"/>
        <param name="pyr_window_size" value="50"/>
        <param name="pixel_scale" value="215"/>
        <param name="alpha" value="0.7"/>
        <!-- Blur size must be an int odd number -->
        <param name="if_blur" value="true"/>
        <param name="blur_size" value="5"/>
    </node>

    <node if="$(arg nearness)" name="simple_nearness" pkg="nearness_estimation" type="simple_nearness_node" output="screen" >
         <param name="num_ring_points" value="160"/>
         <!-- Publish laser depth mmsg -->
         <param name="publish_laser" value="$(arg oflow_laser)"/>
    </node>

    <!-- run pointcloud_to_laserscan node -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <remap from="cloud_in" to="rzi_filt_out"/><!--to="rzi_ROR_filter_out"/>-->
        <remap from="scan" to="radar_scan"/>
        <rosparam>
            target_frame: base_radar_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: -0.1
            max_height: 2.5

            angle_min: -0.785398 # -M_PI/4 # -1.570796
            angle_max: 0.785398 # M_PI/4 # 1.570796
            angle_increment: 0.0392699 # 2*M_PI/160.0
            scan_time: 0.1 # 1/10 f_radar = 10 hz
            range_min: 0.5
            range_max: 15.0
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>

    </node>


    <include if="$(arg odom)" file="$(find robot_localization)/launch/jackal_localization.launch" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_imu" args="0.0 0.0 0.0 0.0 0.0 0 1.0 base_link imu_link" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_radar" args="0.27 0.0 0.0 0.0 0.0 0 1.0 base_link base_radar_link" />
    <!--<node pkg="tf2_ros" type="static_transform_publisher" name="tf_laser" args="0.1 0.0 0.0 0.0 1.0 0.0 0.0 base_link laser" />-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_laser" args="0.1 0.0 0.0 0.0 0.0 1.0 0.0 base_link laser" />
    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="tf_oflow_laser" args="0.1 0.0 0.0 0.0 1.0 0 0.0 base_link oflow_laser_frame" /> -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_map" args="0.0 0.0 0.0 0.0 0.0 0 1.0 map odom" />

    <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find pointcloud_to_laserscan)/rviz/debug_laserscan.rviz"/>
    <!-- "debug_laserscan,visualize_odom"-->

</launch>
